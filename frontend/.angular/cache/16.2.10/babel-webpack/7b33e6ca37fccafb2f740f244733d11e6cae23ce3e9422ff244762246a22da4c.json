{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, Validators } from '@angular/forms';\nimport { UnauthorizedError } from '../../exceptions/UnauthorizedError';\nimport { BadRequestError } from '../../exceptions/BadRequestError';\nimport { RouterModule } from '@angular/router';\nimport { ButtonModule } from 'primeng/button';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../services/user.service\";\nimport * as i4 from \"primeng/api\";\nimport * as i5 from \"@angular/common\";\nfunction LoginComponent_div_6_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \" Enter a valid email address. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_6_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \" Email is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵtemplate(1, LoginComponent_div_6_small_1_Template, 2, 0, \"small\", 8);\n    i0.ɵɵtemplate(2, LoginComponent_div_6_small_2_Template, 2, 0, \"small\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.loginForm.controls.email.errors == null ? null : ctx_r0.loginForm.controls.email.errors[\"email\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.loginForm.controls.email.errors == null ? null : ctx_r0.loginForm.controls.email.errors[\"required\"]);\n  }\n}\nfunction LoginComponent_div_11_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \" Password is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵtemplate(1, LoginComponent_div_11_small_1_Template, 2, 0, \"small\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loginForm.controls.password.errors == null ? null : ctx_r1.loginForm.controls.password.errors[\"required\"]);\n  }\n}\nconst _c0 = function () {\n  return [\"/register\"];\n};\nexport class LoginComponent {\n  constructor(formBuilder, router, userService, messageService) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.userService = userService;\n    this.messageService = messageService;\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.email, Validators.required]],\n      password: ['', Validators.required]\n    }, {\n      updateOn: 'submit'\n    });\n  }\n  loginUser() {\n    if (this.loginForm.invalid) {\n      this.messageService.add({\n        severity: 'error',\n        summary: 'Error',\n        detail: 'Incorrect login data!'\n      });\n      return;\n    }\n    this.userService.login(this.loginForm.value).subscribe({\n      next: () => {\n        this.router.navigate(['home']);\n      },\n      error: e => {\n        if (e instanceof BadRequestError) {\n          this.messageService.add({\n            severity: 'error',\n            summary: 'Error',\n            detail: e.message\n          });\n          this.loginForm.reset();\n        } else if (e instanceof UnauthorizedError) {\n          this.messageService.add({\n            severity: 'error',\n            summary: 'Error',\n            detail: e.message\n          });\n          this.loginForm.reset();\n        } else this.messageService.add({\n          severity: 'error',\n          summary: 'Error',\n          detail: 'Server connection error.'\n        });\n      }\n    });\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.UserService), i0.ɵɵdirectiveInject(i4.MessageService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 16,\n    vars: 5,\n    consts: [[1, \"form\"], [3, \"formGroup\", \"ngSubmit\"], [\"formControlName\", \"email\", \"type\", \"text\", \"pInputText\", \"\", \"placeholder\", \"Email\"], [\"class\", \"error-messages error\", 4, \"ngIf\"], [\"formControlName\", \"password\", \"type\", \"password\", \"pInputText\", \"\", \"placeholder\", \"Password\"], [\"type\", \"submit\"], [\"pbutton\", \"\", 3, \"routerLink\"], [1, \"error-messages\", \"error\"], [4, \"ngIf\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_1_listener() {\n          return ctx.loginUser();\n        });\n        i0.ɵɵelementStart(2, \"div\")(3, \"label\");\n        i0.ɵɵtext(4, \"Email: \");\n        i0.ɵɵelement(5, \"input\", 2);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(6, LoginComponent_div_6_Template, 3, 2, \"div\", 3);\n        i0.ɵɵelementStart(7, \"div\")(8, \"label\");\n        i0.ɵɵtext(9, \"Password: \");\n        i0.ɵɵelement(10, \"input\", 4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(11, LoginComponent_div_11_Template, 2, 1, \"div\", 3);\n        i0.ɵɵelementStart(12, \"button\", 5);\n        i0.ɵɵtext(13, \"Log in\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(14, \"button\", 6);\n        i0.ɵɵtext(15, \" Don't have an account? Register here. \");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls.email.invalid && (ctx.loginForm.controls.email.dirty || ctx.loginForm.controls.email.touched));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls.password.invalid && (ctx.loginForm.controls.password.dirty || ctx.loginForm.controls.password.touched));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(4, _c0));\n      }\n    },\n    dependencies: [CommonModule, i5.NgIf, ReactiveFormsModule, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, ButtonModule, RouterModule, i2.RouterLink],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["CommonModule","ReactiveFormsModule","Validators","UnauthorizedError","BadRequestError","RouterModule","ButtonModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵtemplate","LoginComponent_div_6_small_1_Template","LoginComponent_div_6_small_2_Template","ɵɵadvance","ɵɵproperty","ctx_r0","loginForm","controls","email","errors","LoginComponent_div_11_small_1_Template","ctx_r1","password","LoginComponent","constructor","formBuilder","router","userService","messageService","group","required","updateOn","loginUser","invalid","add","severity","summary","detail","login","value","subscribe","next","navigate","error","e","message","reset","_","ɵɵdirectiveInject","i1","FormBuilder","i2","Router","i3","UserService","i4","MessageService","_2","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵlistener","LoginComponent_Template_form_ngSubmit_1_listener","ɵɵelement","LoginComponent_div_6_Template","LoginComponent_div_11_Template","dirty","touched","ɵɵpureFunction0","_c0","i5","NgIf","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","RouterLink","styles"],"sources":["C:\\Users\\natix\\source\\repos\\BoardGameApp\\frontend\\src\\app\\components\\login\\login.component.ts","C:\\Users\\natix\\source\\repos\\BoardGameApp\\frontend\\src\\app\\components\\login\\login.component.html"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { Component} from '@angular/core';\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { MessageService } from 'primeng/api';\nimport { UnauthorizedError } from '../../exceptions/UnauthorizedError';\nimport { userLoginData } from '../../models/user/userLoginData';\nimport { UserService } from '../../services/user.service';\nimport { BadRequestError } from '../../exceptions/BadRequestError';\nimport { RouterModule } from '@angular/router';\nimport { ButtonModule } from 'primeng/button';\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, ButtonModule, RouterModule],\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n \n})\nexport class LoginComponent {\n\n  loginForm = this.formBuilder.group({\n    email: ['', [Validators.email, Validators.required]],\n    password: ['', Validators.required]\n  }, {updateOn: 'submit'})\n\n  constructor(private formBuilder: FormBuilder, private router: Router, private userService: UserService, private messageService: MessageService){}\n \n  loginUser() {\n    if (this.loginForm.invalid){\n      this.messageService.add({severity: 'error', summary: 'Error', detail: 'Incorrect login data!'});\n      return;\n    }\n    this.userService.login(this.loginForm.value as userLoginData).subscribe({\n      next: () => {\n        this.router.navigate(['home']);\n      },\n      error: (e) =>{\n        if (e instanceof BadRequestError){\n          this.messageService.add({severity: 'error', summary: 'Error', detail: e.message});\n          this.loginForm.reset();\n        }\n        else if (e instanceof UnauthorizedError){\n          this.messageService.add({severity: 'error', summary: 'Error', detail: e.message});\n          this.loginForm.reset();\n        }\n        else this.messageService.add({severity: 'error', summary: 'Error', detail: 'Server connection error.'});\n      }\n    \n    });\n  }\n}\n","<div class = \"form\">\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"loginUser()\">\n        <div >\n            <label>Email: <input formControlName=\"email\" type=\"text\" pInputText placeholder=\"Email\"></label>\n        </div>\n        <div class=\"error-messages error\" *ngIf=\"loginForm.controls.email.invalid && (loginForm.controls.email.dirty || loginForm.controls.email.touched)\"> \n            <small *ngIf=\"loginForm.controls.email.errors?.['email']\">\n                Enter a valid email address.\n            </small>\n            <small *ngIf=\"loginForm.controls.email.errors?.['required']\">\n                Email is required.\n            </small>\n        </div>\n        <div>\n            <label>Password: <input formControlName=\"password\" type=\"password\" pInputText placeholder=\"Password\"></label>\n        </div>\n        <div class=\"error-messages error\" *ngIf=\"loginForm.controls.password.invalid && (loginForm.controls.password.dirty || loginForm.controls.password.touched)\"> \n            <small *ngIf=\"loginForm.controls.password.errors?.['required']\">\n                Password is required.\n            </small>\n        </div>\n        <button type=\"submit\">Log in</button>\n    </form> \n    <button pbutton [routerLink]=\"['/register']\">\n        Don't have an account? Register here. \n    </button>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}