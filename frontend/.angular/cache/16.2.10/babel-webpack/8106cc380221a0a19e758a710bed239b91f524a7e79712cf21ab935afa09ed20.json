{"ast":null,"code":"import { __decorate } from \"tslib\";\n// import { HttpInterceptorFn } from \"@angular/common/http\";\n// import { inject} from \"@angular/core\";\n// import { AuthService } from \"../services/auth.service\";\n// import { tap } from \"rxjs\";\nimport { Injectable } from '@angular/core';\nexport let JwtInterceptor = class JwtInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    const token = this.authService.getToken();\n    const currentDate = new Date();\n    if (token) {\n      const expirationDate = new Date(this.authService.getParsedToken().exp * 1000);\n      if (expirationDate > currentDate) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      } else {\n        this.authService.logout();\n      }\n    }\n    return next.handle(request);\n  }\n};\nJwtInterceptor = __decorate([Injectable()], JwtInterceptor);\n// export const JwtInterceptor: HttpInterceptorFn = (req, next) => { \n//   console.log('request', req.method, req.url);\n//   const authService = inject(AuthService);\n//   const token = authService.getToken();\n//     console.log(\"Interceptor działa!\")\n//     const currentDate = new Date();\n//     if(token){\n//       const expirationDate = new Date(authService.getParsedToken().exp * 1000);\n//       console.log(\"Interceptor działa 22!\")\n//       if(expirationDate > currentDate){\n//         req = req.clone({\n//           setHeaders: {\n//             Authorization: `Bearer ${token}`\n//           }\n//         })\n//       }\n//       else{\n//         authService.logout();\n//       }\n//     }\n//     return next(req).pipe(\n//       tap(resp => console.log('response', resp))\n//     );;\n// }","map":{"version":3,"names":["Injectable","JwtInterceptor","constructor","authService","intercept","request","next","token","getToken","currentDate","Date","expirationDate","getParsedToken","exp","clone","setHeaders","Authorization","logout","handle","__decorate"],"sources":["C:\\Users\\natix\\Desktop\\Nowy folder\\BoardGameApp\\frontend\\src\\app\\interceptors\\jwt.interceptor.ts"],"sourcesContent":["// import { HttpInterceptorFn } from \"@angular/common/http\";\n// import { inject} from \"@angular/core\";\n// import { AuthService } from \"../services/auth.service\";\n// import { tap } from \"rxjs\";\nimport { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = this.authService.getToken()\n    const currentDate = new Date();\n    if (token) {\n      const expirationDate = new Date(this.authService.getParsedToken().exp * 1000);\n      if (expirationDate > currentDate) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      } else {\n        this.authService.logout();\n      }\n    }\n    return next.handle(request)\n  }\n}\n\n// export const JwtInterceptor: HttpInterceptorFn = (req, next) => { \n//   console.log('request', req.method, req.url);\n//   const authService = inject(AuthService);\n//   const token = authService.getToken();\n//     console.log(\"Interceptor działa!\")\n//     const currentDate = new Date();\n//     if(token){\n//       const expirationDate = new Date(authService.getParsedToken().exp * 1000);\n//       console.log(\"Interceptor działa 22!\")\n//       if(expirationDate > currentDate){\n//         req = req.clone({\n//           setHeaders: {\n//             Authorization: `Bearer ${token}`\n//           }\n//         })\n//       }\n//       else{\n//         authService.logout();\n//       }\n//     }\n//     return next(req).pipe(\n//       tap(resp => console.log('response', resp))\n//     );;\n      \n// }\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA,SAASA,UAAU,QAAQ,eAAe;AAMnC,WAAMC,cAAc,GAApB,MAAMA,cAAc;EACzBC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAASA,CAACC,OAAyB,EAAEC,IAAiB;IACpD,MAAMC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;IACzC,MAAMC,WAAW,GAAG,IAAIC,IAAI,EAAE;IAC9B,IAAIH,KAAK,EAAE;MACT,MAAMI,cAAc,GAAG,IAAID,IAAI,CAAC,IAAI,CAACP,WAAW,CAACS,cAAc,EAAE,CAACC,GAAG,GAAG,IAAI,CAAC;MAC7E,IAAIF,cAAc,GAAGF,WAAW,EAAE;QAChCJ,OAAO,GAAGA,OAAO,CAACS,KAAK,CAAC;UACtBC,UAAU,EAAE;YACVC,aAAa,EAAE,UAAUT,KAAK;;SAEjC,CAAC;OACH,MAAM;QACL,IAAI,CAACJ,WAAW,CAACc,MAAM,EAAE;;;IAG7B,OAAOX,IAAI,CAACY,MAAM,CAACb,OAAO,CAAC;EAC7B;CACD;AApBYJ,cAAc,GAAAkB,UAAA,EAD1BnB,UAAU,EAAE,C,EACAC,cAAc,CAoB1B;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}