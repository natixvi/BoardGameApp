{"ast":null,"code":"import { environment } from '../config';\nimport { catchError, of, tap } from 'rxjs';\nimport { UnauthorizedError } from '../exceptions/UnauthorizedError';\nimport { BadRequestError } from '../exceptions/BadRequestError';\nimport { GeneralError } from '../exceptions/GeneralError';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class UserService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = environment.apiUrl;\n    console.log('userservice created!');\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/Account/login`, credentials).pipe(tap(response => {\n      console.log(response);\n      this.authService.login(response.token);\n    }), catchError(error => this.handleError(error)));\n    ;\n  }\n  register(registerData) {\n    return this.http.post(`${this.apiUrl}/Account/register`, registerData).pipe(tap(response => {\n      console.log(response);\n    }), catchError(error => this.handleError(error)));\n    ;\n  }\n  getRoles() {\n    return this.http.get(`${this.apiUrl}/Account/roles`);\n  }\n  handleError(error) {\n    if (error.status === 401) {\n      return of(new UnauthorizedError('Unauthorized'));\n    } else if (error.status === 400) {\n      return of(new BadRequestError('Invalid email or password'));\n    } else {\n      return of(new GeneralError('An error occurred'));\n    }\n    // if (error.status === 401){\n    //   return throwError(() => new UnauthorizedError('Unauthorized'));\n    // }\n    // else if (error.status === 400){\n    //   return throwError(() => new BadRequestError('Invalid email or password'));\n    // }\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","catchError","of","tap","UnauthorizedError","BadRequestError","GeneralError","UserService","constructor","http","authService","apiUrl","console","log","login","credentials","post","pipe","response","token","error","handleError","register","registerData","getRoles","get","status","_","i0","ɵɵinject","i1","HttpClient","i2","AuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\natix\\source\\repos\\BoardGameApp\\frontend\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse} from '@angular/common/http'\nimport { environment } from '../config';\nimport { Observable, catchError, of, tap, throwError } from 'rxjs';\nimport { UnauthorizedError } from '../exceptions/UnauthorizedError';\nimport { BadRequestError } from '../exceptions/BadRequestError';\nimport { GeneralError } from '../exceptions/GeneralError';\nimport { AuthService } from './auth.service';\nimport { userLoginData } from '../models/user/userLoginData';\nimport { UserRegisterData } from '../models/user/userRegisterData';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private apiUrl = environment.apiUrl;\n  constructor(private http: HttpClient, private authService: AuthService) {  console.log('userservice created!');}\n\n  login(credentials: userLoginData){\n    return this.http.post<any>(`${this.apiUrl}/Account/login`, credentials).pipe(\n      tap((response) => { \n        console.log(response)\n        this.authService.login(response.token);\n      }),\n      catchError(error => this.handleError(error))\n    );;\n  }\n\n  register(registerData: UserRegisterData){\n    return this.http.post<any>(`${this.apiUrl}/Account/register`, registerData).pipe(\n      tap((response) => { \n        console.log(response)\n      }),\n      catchError(error => this.handleError(error))\n    );;\n  }\n\n  getRoles(): Observable<any>{\n    return this.http.get<any>(`${this.apiUrl}/Account/roles`);\n  }\n\n  private handleError(error: HttpErrorResponse): Observable<any>{\n    if (error.status === 401) {\n      return of(new UnauthorizedError('Unauthorized'));\n    } else if (error.status === 400) {\n      return of(new BadRequestError('Invalid email or password'));\n    } else {\n      return of(new GeneralError('An error occurred'));\n    }\n\n    \n      // if (error.status === 401){\n    //   return throwError(() => new UnauthorizedError('Unauthorized'));\n    // }\n    // else if (error.status === 400){\n    //   return throwError(() => new BadRequestError('Invalid email or password'));\n    // }\n  }\n}\n"],"mappings":"AAEA,SAASA,WAAW,QAAQ,WAAW;AACvC,SAAqBC,UAAU,EAAEC,EAAE,EAAEC,GAAG,QAAoB,MAAM;AAClE,SAASC,iBAAiB,QAAQ,iCAAiC;AACnE,SAASC,eAAe,QAAQ,+BAA+B;AAC/D,SAASC,YAAY,QAAQ,4BAA4B;;;;AAQzD,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAgB,EAAUC,WAAwB;IAAlD,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,WAAW,GAAXA,WAAW;IADjD,KAAAC,MAAM,GAAGX,WAAW,CAACW,MAAM;IACwCC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;EAAC;EAE/GC,KAAKA,CAACC,WAA0B;IAC9B,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAM,GAAG,IAAI,CAACL,MAAM,gBAAgB,EAAEI,WAAW,CAAC,CAACE,IAAI,CAC1Ed,GAAG,CAAEe,QAAQ,IAAI;MACfN,OAAO,CAACC,GAAG,CAACK,QAAQ,CAAC;MACrB,IAAI,CAACR,WAAW,CAACI,KAAK,CAACI,QAAQ,CAACC,KAAK,CAAC;IACxC,CAAC,CAAC,EACFlB,UAAU,CAACmB,KAAK,IAAI,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC,CAAC,CAC7C;IAAC;EACJ;EAEAE,QAAQA,CAACC,YAA8B;IACrC,OAAO,IAAI,CAACd,IAAI,CAACO,IAAI,CAAM,GAAG,IAAI,CAACL,MAAM,mBAAmB,EAAEY,YAAY,CAAC,CAACN,IAAI,CAC9Ed,GAAG,CAAEe,QAAQ,IAAI;MACfN,OAAO,CAACC,GAAG,CAACK,QAAQ,CAAC;IACvB,CAAC,CAAC,EACFjB,UAAU,CAACmB,KAAK,IAAI,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC,CAAC,CAC7C;IAAC;EACJ;EAEAI,QAAQA,CAAA;IACN,OAAO,IAAI,CAACf,IAAI,CAACgB,GAAG,CAAM,GAAG,IAAI,CAACd,MAAM,gBAAgB,CAAC;EAC3D;EAEQU,WAAWA,CAACD,KAAwB;IAC1C,IAAIA,KAAK,CAACM,MAAM,KAAK,GAAG,EAAE;MACxB,OAAOxB,EAAE,CAAC,IAAIE,iBAAiB,CAAC,cAAc,CAAC,CAAC;KACjD,MAAM,IAAIgB,KAAK,CAACM,MAAM,KAAK,GAAG,EAAE;MAC/B,OAAOxB,EAAE,CAAC,IAAIG,eAAe,CAAC,2BAA2B,CAAC,CAAC;KAC5D,MAAM;MACL,OAAOH,EAAE,CAAC,IAAII,YAAY,CAAC,mBAAmB,CAAC,CAAC;;IAIhD;IACF;IACA;IACA;IACA;IACA;EACF;EAAC,QAAAqB,CAAA,G;qBA3CUpB,WAAW,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX3B,WAAW;IAAA4B,OAAA,EAAX5B,WAAW,CAAA6B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}