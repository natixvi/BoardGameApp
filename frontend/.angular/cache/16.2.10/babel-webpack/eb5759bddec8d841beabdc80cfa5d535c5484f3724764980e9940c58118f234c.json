{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nexport class JwtInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n    console.log(\"jwt inreceptro construckto\");\n  }\n  intercept(request, next) {\n    const token = this.authService.getToken();\n    const currentDate = new Date();\n    if (token) {\n      const expirationDate = new Date(this.authService.getParsedToken().exp * 1000);\n      if (expirationDate > currentDate) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      } else {\n        this.authService.logout();\n      }\n    }\n    return next.handle(request);\n  }\n  static #_ = this.ɵfac = function JwtInterceptor_Factory(t) {\n    return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtInterceptor,\n    factory: JwtInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["JwtInterceptor","constructor","authService","console","log","intercept","request","next","token","getToken","currentDate","Date","expirationDate","getParsedToken","exp","clone","setHeaders","Authorization","logout","handle","_","i0","ɵɵinject","i1","AuthService","_2","factory","ɵfac"],"sources":["C:\\Users\\natix\\Desktop\\Nowy folder\\BoardGameApp\\frontend\\src\\app\\interceptors\\jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n\n  constructor(private authService: AuthService) {\n    console.log(\"jwt inreceptro construckto\")\n  }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const token = this.authService.getToken()\n    const currentDate = new Date();\n    if (token) {\n      const expirationDate = new Date(this.authService.getParsedToken().exp * 1000);\n      if (expirationDate > currentDate) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      } else {\n        this.authService.logout();\n      }\n    }\n    return next.handle(request)\n  }\n}\n"],"mappings":";;AAWA,OAAM,MAAOA,cAAc;EAEzBC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAC7BC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;EAC3C;EAEAC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,KAAK,GAAG,IAAI,CAACN,WAAW,CAACO,QAAQ,EAAE;IACzC,MAAMC,WAAW,GAAG,IAAIC,IAAI,EAAE;IAC9B,IAAIH,KAAK,EAAE;MACT,MAAMI,cAAc,GAAG,IAAID,IAAI,CAAC,IAAI,CAACT,WAAW,CAACW,cAAc,EAAE,CAACC,GAAG,GAAG,IAAI,CAAC;MAC7E,IAAIF,cAAc,GAAGF,WAAW,EAAE;QAChCJ,OAAO,GAAGA,OAAO,CAACS,KAAK,CAAC;UACtBC,UAAU,EAAE;YACVC,aAAa,EAAE,UAAUT,KAAK;;SAEjC,CAAC;OACH,MAAM;QACL,IAAI,CAACN,WAAW,CAACgB,MAAM,EAAE;;;IAG7B,OAAOX,IAAI,CAACY,MAAM,CAACb,OAAO,CAAC;EAC7B;EAAC,QAAAc,CAAA,G;qBAtBUpB,cAAc,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdzB,cAAc;IAAA0B,OAAA,EAAd1B,cAAc,CAAA2B;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}