{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { CommonModule } from '@angular/common';\nimport { Component, inject } from '@angular/core';\nimport { ReactiveFormsModule, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { checkPasswordsValidator } from '../../validators/checkPasswords.validator';\nimport { BadRequestError } from '../../../exceptions/BadRequestError';\nimport { ButtonModule } from 'primeng/button';\nexport let RegisterComponent = class RegisterComponent {\n  constructor(formBuilder, userService, messageService) {\n    this.formBuilder = formBuilder;\n    this.userService = userService;\n    this.messageService = messageService;\n    this.registerForm = this.formBuilder.group({\n      nickName: ['', Validators.required],\n      email: ['', [Validators.email, Validators.required]],\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      confirmPassword: ['', [Validators.required, Validators.minLength(8)]]\n    }, {\n      validators: checkPasswordsValidator,\n      updateOn: 'submit'\n    });\n    this.router = inject(Router);\n  }\n  registerUser() {\n    if (this.registerForm.invalid) {\n      this.messageService.add({\n        severity: 'error',\n        summary: 'Error',\n        detail: 'Incorrect register data!'\n      });\n      return;\n    }\n    const registerData = {\n      nickName: this.registerForm.get('nickName')?.value,\n      email: this.registerForm.get('email')?.value,\n      password: this.registerForm.get('password')?.value,\n      confirmPassword: this.registerForm.get('confirmPassword')?.value\n    };\n    this.userService.register(registerData).subscribe({\n      next: () => {\n        console.log('Rejestracja udana');\n        const loginData = {\n          email: this.registerForm.get('email')?.value,\n          password: this.registerForm.get('password')?.value\n        };\n        console.log('Przed logowaniem');\n        this.userService.login(loginData).subscribe({\n          next: () => {\n            console.log('Logowanie udane');\n            this.router.navigate(['home']);\n          }\n        });\n      },\n      error: e => {\n        if (e instanceof BadRequestError) {\n          this.messageService.add({\n            severity: 'error',\n            summary: 'Błąd',\n            detail: e.message\n          });\n          this.registerForm.reset();\n          this.registerForm.setErrors({\n            generalError: true\n          });\n        } else {\n          this.messageService.add({\n            severity: 'error',\n            summary: 'Error',\n            detail: 'Server connection error'\n          });\n        }\n      }\n    });\n    console.log('Po rejestracji');\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, ButtonModule, RouterModul],\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);","map":{"version":3,"names":["CommonModule","Component","inject","ReactiveFormsModule","Validators","Router","checkPasswordsValidator","BadRequestError","ButtonModule","RegisterComponent","constructor","formBuilder","userService","messageService","registerForm","group","nickName","required","email","password","minLength","confirmPassword","validators","updateOn","router","registerUser","invalid","add","severity","summary","detail","registerData","get","value","register","subscribe","next","console","log","loginData","login","navigate","error","e","message","reset","setErrors","generalError","__decorate","selector","standalone","imports","RouterModul","templateUrl","styleUrls"],"sources":["C:\\Users\\natix\\source\\repos\\BoardGameApp\\frontend\\src\\app\\components\\register\\register\\register.component.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { Component, inject } from '@angular/core';\nimport { AbstractControlOptions, FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { UserService } from '../../../services/user.service';\nimport { MessageService } from 'primeng/api';\nimport { Router, RouterModule } from '@angular/router';\nimport { UserRegisterData } from '../../../models/user/userRegisterData';\nimport { checkPasswordsValidator } from '../../validators/checkPasswords.validator';\nimport { userLoginData } from '../../../models/user/userLoginData';\nimport { BadRequestError } from '../../../exceptions/BadRequestError';\nimport { ButtonModule } from 'primeng/button';\n\n\n@Component({\n  selector: 'app-register',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, ButtonModule, RouterModul ],\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css'],\n\n})\nexport class RegisterComponent {\n  registerForm=this.formBuilder.group({\n    nickName: ['', Validators.required],\n    email: ['', [Validators.email,Validators.required]],\n    password: ['', [Validators.required, Validators.minLength(8)]],\n    confirmPassword: ['', [Validators.required, Validators.minLength(8)]]\n    },{validators: checkPasswordsValidator, updateOn: 'submit'}  as AbstractControlOptions)\n\n  router: Router = inject(Router);\n\n  constructor(private formBuilder: FormBuilder, private userService: UserService, private messageService: MessageService){}\n\n\n  registerUser() {\n    if (this.registerForm.invalid){\n      this.messageService.add({severity: 'error', summary: 'Error', detail: 'Incorrect register data!'});\n      return;\n    }\n\n    const registerData = {\n      nickName: this.registerForm.get('nickName')?.value,\n      email: this.registerForm.get('email')?.value,\n      password: this.registerForm.get('password')?.value,\n      confirmPassword: this.registerForm.get('confirmPassword')?.value\n      \n    } as UserRegisterData;\n\n    this.userService.register(registerData).subscribe(\n      {\n      next: () => {\n        console.log('Rejestracja udana');\n        const loginData = {\n          email: this.registerForm.get('email')?.value,\n          password: this.registerForm.get('password')?.value\n        } as userLoginData\n        console.log('Przed logowaniem');\n\n        this.userService.login(loginData).subscribe(\n          {\n            next: () => {\n              console.log('Logowanie udane');\n              this.router.navigate(['home']);\n            }\n          }\n        );\n\n      },\n      error: (e) =>{\n        if (e instanceof BadRequestError){\n          this.messageService.add({severity: 'error', summary: 'Błąd', detail: e.message});\n          this.registerForm.reset();\n          this.registerForm.setErrors({ generalError: true });\n        }\n        else\n        {\n          this.messageService.add({severity: 'error', summary: 'Error', detail: 'Server connection error'})\n        }\n      }\n      \n    });\n    console.log('Po rejestracji');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}