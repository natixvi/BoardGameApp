{"ast":null,"code":"import { Router } from '@angular/router';\nimport { of, switchMap } from 'rxjs';\nimport { AuthService } from '../services/auth/auth.service';\nimport { inject } from '@angular/core';\nexport const loginGuard = (route, state) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  return authService.isLoggedIn$.pipe(switchMap(isLoggedIn => {\n    if (isLoggedIn) {\n      return router.navigate(['home']).then(() => false);\n    }\n    return of(true);\n  }));\n};","map":{"version":3,"names":["Router","of","switchMap","AuthService","inject","loginGuard","route","state","authService","router","isLoggedIn$","pipe","isLoggedIn","navigate","then"],"sources":["C:\\Users\\natix\\source\\repos\\BoardGameApp\\frontend\\src\\app\\guards\\login.guard.ts"],"sourcesContent":["import { ActivatedRouteSnapshot, CanActivateFn, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of, switchMap } from 'rxjs';\nimport { AuthService } from '../services/auth/auth.service';\nimport { inject } from '@angular/core';\n\nexport const loginGuard: CanActivateFn = (route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | boolean => {\n  const authService: AuthService = inject(AuthService);\n  const router: Router = inject(Router);\n  return authService.isLoggedIn$.pipe(\n    switchMap((isLoggedIn) => {\n      if (isLoggedIn){\n        return router.navigate(['home']).then(() => false);\n      }\n      return of(true);\n    })\n  );\n};\n"],"mappings":"AAAA,SAAgDA,MAAM,QAA6B,iBAAiB;AACpG,SAAqBC,EAAE,EAAEC,SAAS,QAAQ,MAAM;AAChD,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,SAASC,MAAM,QAAQ,eAAe;AAEtC,OAAO,MAAMC,UAAU,GAAkBA,CAACC,KAA6B,EAAEC,KAA0B,KAAmC;EACpI,MAAMC,WAAW,GAAgBJ,MAAM,CAACD,WAAW,CAAC;EACpD,MAAMM,MAAM,GAAWL,MAAM,CAACJ,MAAM,CAAC;EACrC,OAAOQ,WAAW,CAACE,WAAW,CAACC,IAAI,CACjCT,SAAS,CAAEU,UAAU,IAAI;IACvB,IAAIA,UAAU,EAAC;MACb,OAAOH,MAAM,CAACI,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM,KAAK,CAAC;;IAEpD,OAAOb,EAAE,CAAC,IAAI,CAAC;EACjB,CAAC,CAAC,CACH;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}