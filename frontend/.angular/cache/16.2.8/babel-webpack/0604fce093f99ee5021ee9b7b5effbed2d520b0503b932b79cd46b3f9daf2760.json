{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    //BehaviorSubject jest używany do śledzenia bieżącego stanu zalogowania, a Observable umożliwia subskrybowanie tych zmian.\n    this._isLoggedIn$ = new BehaviorSubject(false); // Obiekt zachowujacy swoja wartosc w czasie, moze byc obserwowany, ale dodatkowo przechuwje swoja ostatnia wartosc,\n    //która była wysłana, dzięki czemu nowi subskrybenci otrzymają bieżącą wartość od razu po subskrypcji.\n    this.isLoggedIn$ = this._isLoggedIn$.asObservable(); //Wlasciwosc publiczna ($ bo obseravble - taka konwencja), dzieki ktorej mozna ja uzywac i subskybowac zmiany stanu zalogowania ale nie ozna go zmieniac\n    this.checkToken();\n  }\n  checkToken() {\n    const token = this.getToken();\n    this._isLoggedIn$.next(!token);\n  }\n  login(token) {\n    this.setToken(token);\n    this._isLoggedIn$.next(true);\n  }\n  getParsedToken() {\n    const token = this.getToken() ?? '';\n    return JSON.parse(atob(token.split('.')[1]));\n  }\n  setToken(token) {\n    localStorage.setItem('authToken', token);\n  }\n  getToken() {\n    return localStorage.getItem('authToken');\n  }\n  removeToken() {\n    localStorage.removeItem('authToken');\n  }\n  logout() {\n    this.removeToken();\n    this._isLoggedIn$.next(false);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","AuthService","constructor","_isLoggedIn$","isLoggedIn$","asObservable","checkToken","token","getToken","next","login","setToken","getParsedToken","JSON","parse","atob","split","localStorage","setItem","getItem","removeToken","removeItem","logout","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\natix\\source\\repos\\BoardGameApp\\frontend\\src\\app\\services\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  //BehaviorSubject jest używany do śledzenia bieżącego stanu zalogowania, a Observable umożliwia subskrybowanie tych zmian.\n\n  private _isLoggedIn$ = new BehaviorSubject<boolean>(false); // Obiekt zachowujacy swoja wartosc w czasie, moze byc obserwowany, ale dodatkowo przechuwje swoja ostatnia wartosc,\n  //która była wysłana, dzięki czemu nowi subskrybenci otrzymają bieżącą wartość od razu po subskrypcji.\n  isLoggedIn$: Observable<boolean> = this._isLoggedIn$.asObservable(); //Wlasciwosc publiczna ($ bo obseravble - taka konwencja), dzieki ktorej mozna ja uzywac i subskybowac zmiany stanu zalogowania ale nie ozna go zmieniac\n\n  constructor() { \n    this.checkToken();\n  }\n\n  private checkToken(){\n    const token = this.getToken();\n    this._isLoggedIn$.next(!token);\n  }\n\n  login(token: string) {\n    this.setToken(token);\n    this._isLoggedIn$.next(true);\n  }\n\n  getParsedToken(){\n    const token = this.getToken() ?? '';\n    return JSON.parse(atob(token.split('.')[1]))\n  }\n\n  setToken(token: string){\n    localStorage.setItem('authToken', token);\n  }\n\n  getToken(){\n    return localStorage.getItem('authToken');\n  }\n\n  removeToken(){\n    localStorage.removeItem('authToken');\n  }\n\n  logout(){\n    this.removeToken();\n    this._isLoggedIn$.next(false);\n  }\n}\n"],"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;;AAKlD,OAAM,MAAOC,WAAW;EAQtBC,YAAA;IANA;IAEQ,KAAAC,YAAY,GAAG,IAAIH,eAAe,CAAU,KAAK,CAAC,CAAC,CAAC;IAC5D;IACA,KAAAI,WAAW,GAAwB,IAAI,CAACD,YAAY,CAACE,YAAY,EAAE,CAAC,CAAC;IAGnE,IAAI,CAACC,UAAU,EAAE;EACnB;EAEQA,UAAUA,CAAA;IAChB,MAAMC,KAAK,GAAG,IAAI,CAACC,QAAQ,EAAE;IAC7B,IAAI,CAACL,YAAY,CAACM,IAAI,CAAC,CAACF,KAAK,CAAC;EAChC;EAEAG,KAAKA,CAACH,KAAa;IACjB,IAAI,CAACI,QAAQ,CAACJ,KAAK,CAAC;IACpB,IAAI,CAACJ,YAAY,CAACM,IAAI,CAAC,IAAI,CAAC;EAC9B;EAEAG,cAAcA,CAAA;IACZ,MAAML,KAAK,GAAG,IAAI,CAACC,QAAQ,EAAE,IAAI,EAAE;IACnC,OAAOK,IAAI,CAACC,KAAK,CAACC,IAAI,CAACR,KAAK,CAACS,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9C;EAEAL,QAAQA,CAACJ,KAAa;IACpBU,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEX,KAAK,CAAC;EAC1C;EAEAC,QAAQA,CAAA;IACN,OAAOS,YAAY,CAACE,OAAO,CAAC,WAAW,CAAC;EAC1C;EAEAC,WAAWA,CAAA;IACTH,YAAY,CAACI,UAAU,CAAC,WAAW,CAAC;EACtC;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACF,WAAW,EAAE;IAClB,IAAI,CAACjB,YAAY,CAACM,IAAI,CAAC,KAAK,CAAC;EAC/B;EAAC,QAAAc,CAAA,G;qBA1CUtB,WAAW;EAAA;EAAA,QAAAuB,EAAA,G;WAAXvB,WAAW;IAAAwB,OAAA,EAAXxB,WAAW,CAAAyB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}